@page "/Investments"
@attribute [RenderModeInteractiveServer]

<h3>Blazor Widget</h3>

<div class="widget bg-red-500 w-screen h-full">
    <header>
        @foreach (var (tab, index) in tabHeaders.Select((value, i) => (value, i)))
        {
            <button @onclick="() => SetActiveTab(index)" class="@(activeIndex == index ? "active" : "")">
                @tab
            </button>
        }
        <div class="underline" style="transform: translate(@(activeIndex * buttonWidth)px, 0);"></div>
    </header>
    <div class="content">
        <div class="content-inner" style="transform: translate(@(-(activeIndex * tabWidth))px, 0);">
            @foreach (var tabContentItem in tabContent)
            {
                <div>
                    <h2>@tabContentItem.Header</h2>
                    @((MarkupString)tabContentItem.Content)
                </div>
            }
        </div>
    </div>
</div>
<style>
    :root {
      --color-primary: #5644fd;
      --tab-width: 100%;
      --button-width: 64px;
    }
    
    * {
      box-sizing: border-box;
    }
    
    html,
    body,
    .wrapper {
      height: 100%;
    }
    
    body {
      display: grid;
      place-items: center;
      margin: 0;
      line-height: 1.5;
      background: #f1f0ff;
      color: #58547b;
    }
    
    .widget {
      background: #ffffff;
      width: 100%;
      border-radius: 8px;
    }
    
    .widget > header {
      position: relative;
      display: flex;
      border-bottom: 1px solid #e2e1ef;
    }
    
    .widget > header > button {
      padding: 20px;
      font-size: 15px;
      width: 120px;
      cursor: pointer;
      background: transparent;
      color: #918db7;
      border: 0;
      font-size: 24px;
      transition: 0.3s;
    }
    
    .widget > header > button:not(.active) {
      opacity: 0.7;
    }
    
    .widget > header > button:hover:not(.active) {
      opacity: 1;
    }
    
    .widget > header > button.active {
      color: var(--color-primary);
    }
    
    .content {
      position: relative;
      overflow: hidden;
      height: 140px;
    }
    
    .content-inner {
      position: absolute;
      top: 0;
      left: 0;
      display: flex;
      align-items: center;
      width: calc(var(--tab-width) * 3);
      transition: 0.3s;
    }
    
    .underline {
      position: absolute;
      left: 0;
      bottom: 0;
      width: 64px;
      height: 3px;
      background: var(--color-text-accent);
      transition: 0.2s;
    }
    
    h2 {
      margin: 0 0 10px;
      font-size: 18px;
      font-weight: 600;
    }
    
    p {
      margin: 0;
      font-size: 14px;
    }
    
    .content-inner > div {
      width: inherit;
      padding: 20px;
    }
</style>

@code {
    private int activeIndex = 0;
    private const int buttonWidth = 64;
    private const int tabWidth = 300;

    private readonly string[] tabHeaders = { "Home", "Account", "Settings" };

    private class TabContentItem
    {
        public string Header { get; set; }
        public string Content { get; set; }
    }

    private readonly List<TabContentItem> tabContent = new List<TabContentItem>
    {
        new TabContentItem
        {
            Header = "Home",
            Content = "<input type=\"email\" />"
        },
        new TabContentItem
        {
            Header = "Account",
            Content = "This is the tab content, you can put anything you like in here."
        },
        new TabContentItem
        {
            Header = "Settings",
            Content = "This is the tab content, you can put anything you like in here."
        },
    };

    private void SetActiveTab(int tabIndex)
    {
        activeIndex = tabIndex;
    }
}
