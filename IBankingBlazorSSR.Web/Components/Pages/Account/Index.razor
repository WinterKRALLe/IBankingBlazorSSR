@page "/"
@using IBankingBlazorSSR.Application.Abstraction
@using IBankingBlazorSSR.Application.Implementation
@using Microsoft.IdentityModel.Tokens

<PageTitle>IBanking</PageTitle>

@inject IAccountService AccountService

<div class="w-full flex px-4 gap-x-4 border-b border-[#25283a]">
    <label class="w-fit px-4 py-2 cursor-pointer text-skin-base2 focus:outline-none peer-checked:text-skin-base relative peer-checked:after:scale-x-100 peer-checked:after:opacity-100 peer-checked:after:block transition-all duration-500 ease-in-out after:h-0.5 after:bg-white after:absolute after:left-0 after:right-0 after:-bottom-1 after:opacity-0 after:scale-x-0 after:transition-all after:duration-[250] after:ease-[cubic-bezier(0.25, 0.46, 0.45, 0.94)] after:hover:opacity-100 after:hover:scale-x-100" for="yes">Produkty</label>
    <label class="w-fit px-4 py-2 cursor-pointer text-skin-base2 focus:outline-none peer-checked:text-skin-base relative peer-checked:after:scale-x-100 peer-checked:after:opacity-100 peer-checked:after:block transition-all duration-500 ease-in-out after:h-0.5 after:bg-white after:absolute after:left-0 after:right-0 after:-bottom-1 after:opacity-0 after:scale-x-0 after:transition-all after:duration-[250] after:ease-[cubic-bezier(0.25, 0.46, 0.45, 0.94)] after:hover:opacity-100 after:hover:scale-x-100" for="no">About</label>
</div>

<ul class="w-full flex justify-center relative px-5">
    <li class="absolute top-0 left-0 bottom-0 right-0">
        <input class="peer sr-only" type="radio" value="yes" name="answer" id="yes" checked/>
        <div class="mt-2 w-full transition-all duration-500 ease-in-out translate-x-40 opacity-0 invisible peer-checked:opacity-100 peer-checked:visible peer-checked:translate-x-1">
            <div class="flex flex-col gap-y-12 transition duration-300 relative overflow-x-hidden">
                <div class="flex gap-10 mt-4 flex-wrap">
                    @if (!UserData.Accounts.IsNullOrEmpty())
                    {
                        foreach (var account in UserData.Accounts)
                        {
                            <Account
                                AccountType="@account.Type"
                                Currency="@account.Currency"
                                Balance="@account.Balance"
                                AccountNum="@account.AccountNumber"/>
                        }
                    }
                </div>
                <div>
                    <div class="flex items-center gap-4">
                        <h1 class="text-2xl">Karty</h1><span class="text-skin-base2">(@UserData.CardCount / 3)</span>
                        @if (UserData.CardCount < 3)
                        {
                            <a class="rounded-lg flex justify-center items-center bg-skin-button_accent p-2 pr-3" href="/Cards/AddCard">
                                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" class="fill-skin-base" viewBox="0 0 256 256">
                                    <path d="M224,128a8,8,0,0,1-8,8H136v80a8,8,0,0,1-16,0V136H40a8,8,0,0,1,0-16h80V40a8,8,0,0,1,16,0v80h80A8,8,0,0,1,224,128Z"></path>
                                </svg>
                                <span>Přidat</span>
                            </a>
                        }
                    </div>
                    <div class="w-screen md:w-auto shrink-0 flex items-center overflow-x-auto snap-mandatory snap-x scroll-smooth gap-4 md:gap-8 px-2 lg:px-0">
                        @if (!UserData.Cards.IsNullOrEmpty())
                        {
                            @foreach (var card in UserData.Cards.Select((card, index) => new { Card = card, Index = index }))
                            {
                                <Card
                                    BgGradient="@_background[card.Index % _background.Length]"
                                    CardNumber="@card.Card.CardNumber"
                                    CardHolder="@card.Card.Holder"
                                    Expiration="@card.Card.Expiration"
                                    Cvv="@card.Card.CVV"
                                    State="@card.Card.State"/>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </li>

    <li class="absolute top-0 right-0 bottom-0 left-0">
        <input class="peer sr-only" type="radio" value="no" name="answer" id="no"/>
        <div class="mt-2 w-fit transition-all duration-500 ease-in-out translate-x-40 opacity-0 invisible peer-checked:opacity-100 peer-checked:visible peer-checked:translate-x-1">
            <table class="w-full hidden md:block">
                <thead class="bg-skin-muted border-b-2 border-gray-200">
                <tr>
                    <th class="w-24 p-3 text-sm font-semibold tracking-wide text-left">Datum</th>
                    <th class="w-32 p-3 text-sm font-semibold tracking-wide text-left">Částka</th>
                    <th class="p-3 text-sm font-semibold tracking-wide text-left">Zpráva</th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                @if (!UserData.Movements.IsNullOrEmpty())
                {
                    foreach (var movement in UserData.Movements)
                    {
                        <tr>
                            <td class="p-3 text-sm whitespace-nowrap">@movement.SentAt.ToString("dd/MM/yyyy")</td>
                            @if (movement.AccountNumberFrom == UserData.MyAccountNumber)
                            {
                                <td class="p-3 text-sm whitespace-nowrap text-red-500">@($"{movement.Amount:F2}") Kč</td>
                            }
                            else
                            {
                                <td class="p-3 text-sm whitespace-nowrap text-green-500">@($"{movement.Amount:F2}") Kč</td>
                            }
                            <td class="p-3 text-sm whitespace-nowrap">@movement.Message</td>
                        </tr>
                    }
                }
                </tbody>
            </table>
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 md:hidden">
                @if (!UserData.Movements.IsNullOrEmpty())
                {
                    @foreach (var movement in UserData.Movements)
                    {
                        <div class="space-y-3 p-4 rounded-lg shadow">
                            <div class="flex items-center space-x-2 text-sm">
                                <div class="">@movement.SentAt.ToString("dd/MM/yyyy")</div>
                            </div>
                            @if (movement.AccountNumberFrom == UserData.MyAccountNumber)
                            {
                                <div class="text-sm font-medium text-red-500">
                                    @($"{movement.Amount:F2}") Kč
                                </div>
                            }
                            else
                            {
                                <div class="text-sm font-medium text-green-500">
                                    @($"{movement.Amount:F2}") Kč
                                </div>
                            }
                            <div class="text-sm">
                                @movement.Message
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </li>
</ul>

@code {

    private readonly string[] _background =
    {
        "background: linear-gradient(to left, #ea8d8d, #a890fe)",
        "background: linear-gradient(to right, #0Eb9bb, #F1322D)",
        "background: linear-gradient(to right, #FB7BA2, #FCE043)"
    };

    private AccountService.UserData UserData { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        UserData = await AccountService.GetUserDataAsync();
    }

}